构建橙狐recovery镜像步骤说明，参考橙狐官方wiki页面
https://wiki.orangefox.tech/en/dev/building
需要一台电脑，至少50G硬盘空间，建议100G以上(build系统本身35g-45g，每一个设备实际6g以上，如果用ccache还得算上ccache缓存)，运行内存安卓10至少要8g以上（安卓11最少16g，20g以上更好，安卓12最少20g，24以上更好），需要Linux系统，推荐使用debian系的发行版（比如Ubuntu、Linux Mint等）。ArchLinux也能用，但是挺麻烦的，至于其他发行版你自己看着办。
不推荐使用root权限构建

0.准备环境（debian系的发行版，会自动安装需要的软件包、设置git信息、设置adb规则、安装安卓sdk，其他发行版需要手动准备，这个部分只用第一次，以后不用运行了）
cd ~
sudo apt install git aria2 -y
git clone https://gitlab.com/OrangeFox/misc/scripts
cd scripts
sudo bash setup/android_build_env.sh
sudo bash setup/install_android_sdk.sh

如果repo安装失败（高概率，网址被墙），可能需要手动安装repo命令，可以考虑用sudo apt install repo或者去清华源或者中科大源，根据说明下载手动安装
我不是很确定这里装没装ccache（用来在构建的时候留下缓存，据说能加快下一次构建速度），如果没装，你可以手动装一个
最后获得recovery镜像时有一步是用java8来签名，虽然没有java8也能跳过签名得到img镜像，但是如果你介意的话，可以手动安装一个openjdk-8-jdk
(仅适用于安卓10。安卓11以上版本已自带jdk，无需额外安装)

1.下载橙狐源码（用安卓10分支举例）
a.使用rsync（很慢）
mkdir ~/OrangeFox_10
cd ~/OrangeFox_10
rsync rsync://sources.orangefox.download/sources/fox_10.0 . --progress -a

b.或者使用脚本
（我是用的这种，用安卓11分支举例，这个部分只用第一次，以后不用运行了）
mkdir ~/OrangeFox_sync
cd ~/OrangeFox_sync
  git clone https://gitlab.com/OrangeFox/sync.git
  cd ~/OrangeFox_sync/sync/
  ./orangefox_sync.sh --branch 11.0 --path ~/fox_11.0

如果下载速度很慢的话，打开~/fox_11.0/.repo/Manifest文件夹，把里面所有xml的aosp源换成清华源或者中科大源，把lineage源换成清华源或者github加速站（清华源速度快，但是有部分目录会提示丢失无法下载，我是同步完了之后，再改成github加速站再同步一遍补齐），把github源也换成github加速站，gitlab好像没办法，只能慢慢下载或者科学上网

理论上orangefox_sync.sh脚本会下载构建twrp的最少源码、橙狐的recovery和vendor目录，qcom的gpt-utils代码、qcom的的解密程序启动脚本，并给build目录打补丁，如果因为各种原因而没有下载完成建议使用rsync方式或者自己研究orangefox_sync.sh脚本，手动补全，简单说就是

  1.同步twrp minimal manifest对应的分支
  2.在终端里cd进manifest的“build”子目录
  3.在build目录下运行命令：patch -p1 < patch-manifest-fox_"X".diff（“X”=分支版本：如9.0、7.1、6.0等，diff文件在~/OrangeFox_sync/sync/patches/里）
  4.在终端里cd进manifest的“bootable”子目录
  5.删除“recovery”子目录，并将OrangeFox源码克隆到新的“recovery”子目录中
  6.在终端里cd进manifest的“vendor”子目录
  7.将OrangeFox vendor源码克隆到新的“recovery”子目录中
  （8.安卓12分支由于上游twrp12仍在开发中，目前即使完成上述步骤，仍然会编译失败，所以需要额外手动打补丁，具体方法orangefox_sync.sh脚本里有提到）

举个例子，第4、5步打开~/fox_11.0/bootable目录，检查recovery文件夹里面到底是橙狐的源码还是twrp的源码，如果是twrp的就删除整个recovery文件夹，用这个命令下载橙狐的rec源码
cd ~/fox_11.0/bootable
git clone --depth 1 https://gitlab.com/OrangeFox/bootable/Recovery.git -b fox_11.0 recovery
git clone https://gitlab.com/OrangeFox/misc/theme.git recovery/gui/theme

第6、7步打开~/fox_11.0/vendor目录，检查有没有recovery文件夹，如果没有，用这个命令下载橙狐的vendor目录
cd ~/fox_11.0/vendor
git clone --depth 1 https://gitlab.com/OrangeFox/vendor/recovery.git -b fox_11.0 recovery

2.下载device目录（这个部分只用第一次，以后不用运行了）
cd ~/fox_11.0
mkdir -p device/xiaomi
cd device/xiaomi
git clone https://github.com/ymdzq/OFRP-device_xiaomi_bomb.git bomb
（这里仅供参考，截至目前由于bomb适配a12分支已经基本完成，而a11分支仍然无法解密，所以我把a11分支删了，没想到吧）

3.开始构建
cd ~/fox_11.0
source build/envsetup.sh
lunch twrp_bomb-eng && mka adbd recoveryimage
也可以参考安卓10分支的脚本~/OrangeFox_sync/sync/legacy/build_fox.sh（已经过时，需要修改）

这里如果有需要清理之前构建生成的文件重新构建
make clean

根据橙狐的变量说明，如果不是给Xiaomi MIUI设备构建橙狐，并且不在乎block-based增量OTA更新，可以加入以下变量：
export OF_DISABLE_MIUI_SPECIFIC_FEATURES=1
或者
export OF_VANILLA_BUILD=1
如果给Xiaomi MIUI设备构建橙狐，可以加入以下变量，防止启动MIUI ROM时默认MIUI recovery会覆盖OrangeFox（不过如果rom刷了面具或者处理过boot，就用不上了，得是官方boot才能触发写入MIUI recovery，而且不过有的机型无效，反而每次刷rom会重复出现找不到avb2.0无须patch提示）：
export OF_PATCH_AVB20=1
如果是A/B分区机型（必须确定），应该加入以下变量：
export OF_AB_DEVICE=1
export OF_USE_MAGISKBOOT_FOR_ALL_PATCHES=1
不过现在很多magisk相关变量现在橙狐都是默认开启
如果使用fox_11.0分支构建并且是Virtual A/B（"VAB"）分区机型，可以加入以下变量，防止刷入OrangeFox zip安装包或者修改启动画面时出现问题：
export OF_VIRTUAL_AB_DEVICE=1
export OF_USE_NEW_MAGISKBOOT=1
如果希望后续构建更快，可以使用 ccache
export USE_CCACHE=1
export CCACHE_EXEC=/usr/bin/ccache
ccache -M 50G # 为缓存预留50GB的磁盘空间

4.如果编译期间没有错误，最终的recovery镜像将出现在out/target/product/bomb/OrangeFox-unofficial-bomb.img或者sync/BUILDS/bomb/target/product/bomb/OrangeFox-Unofficial-bomb.img

橙狐特有的变量应该用在终端脚本里，或者放进vendorsetup.sh文件，不要放进BoardConfig.mk或者任何.mk文件里，否则大部分不生效
如果是使用rsync命令下载源码，用同样的命令更新，如果是使用orangefox_sync.sh脚本，如何更新看另一篇说明
